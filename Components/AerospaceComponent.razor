@inject IAerospaceFaker _aerospaceFaker
@inject ISnackbar _snackbar
@inject ILocalStorageService _localStorage
@inject IFileExporterService _fileExporterService

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDataGrid T="AerospaceModel" Items="aerospaceData" Dense="true" Hover="true" Bordered="true" Striped="true" ColumnResizeMode="ResizeMode.Container">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Aerospace Data</MudText>
            <MudSpacer />
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">

                @if (isLoadingFileCsv)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" OnClick="ExportCsv">Export .csv</MudButton>
                }

                @if (isLoadingFileXlsx)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportXlsx">Export .xlsx</MudButton>
                }

                @if (isLoadingFileSql)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileCode" OnClick="ExportSql">Export .sql</MudButton>
                }

            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.AircraftModel" Title="Aircraft Model" />
            <PropertyColumn Property="x => x.Manufacturer" Title="Manufacturer" />
            <PropertyColumn Property="x => x.EngineType" Title="Engine Type" />

            <PropertyColumn Property="x => x.WingspanMeters" Title="Wingspan (m)">
                <CellTemplate>
                    @context.Item.WingspanMeters.ToString("F1")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.LengthMeters" Title="Length (m)">
                <CellTemplate>
                    @context.Item.LengthMeters.ToString("F1")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.MaxSpeedKmH" Title="Max Speed (km/h)" />
            <PropertyColumn Property="x => x.RangeKm" Title="Range (km)" />
            <PropertyColumn Property="x => x.CrewSize" Title="Crew Size" />
            <PropertyColumn Property="x => x.PassengerCapacity" Title="Passenger Capacity" />

            <PropertyColumn Property="x => x.FirstFlightDate" Title="First Flight">
                <CellTemplate>
                    @context.Item.FirstFlightDate.ToShortDateString()
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.CertificationDate" Title="Certification">
                <CellTemplate>
                    @context.Item.CertificationDate.ToShortDateString()
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.LastMaintenanceDate" Title="Last Maintenance">
                <CellTemplate>
                    @context.Item.LastMaintenanceDate.ToShortDateString()
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.CountryOfOrigin" Title="Country" />

            <PropertyColumn Property="x => x.InProduction" Title="In Production">
                <CellTemplate>
                    @(context.Item.InProduction ? "Yes" : "No")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.Description" Title="Description" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="AerospaceModel" />
        </PagerContent>
    </MudDataGrid>

}


@code {

    private bool isLoadingFileCsv = false;

    private bool isLoadingFileXlsx = false;

    private bool isLoadingFileSql = false;

    private bool isLoading = false;

    private IEnumerable<AerospaceModel> aerospaceData = [];

    RegionInfo? regionInfo = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            int Quantity = await _localStorage.GetItemAsync<int>("quantity");

            string? Language = await _localStorage.GetItemAsync<string>("selectedLanguage");

            await Task.Delay(1000);

            aerospaceData = await _aerospaceFaker.GenerateAerospaceAsync(Quantity, Language!);

            Language = Language!.ReplaceLanguage(Language!);

            regionInfo = new RegionInfo(Language);

            isLoading = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            aerospaceData = Enumerable.Empty<AerospaceModel>();
        }
        await Task.CompletedTask;
    }

    private async Task ExportCsv()
    {
        try
        {
            isLoadingFileCsv = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportCsvAsync(aerospaceData, "Aerospace");

            _snackbar.Add("CSV file exported successfully!", Severity.Success);

            isLoadingFileCsv = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportXlsx()
    {
        try
        {
            isLoadingFileXlsx = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportXlsxAsync(aerospaceData, "Aerospace");

            isLoadingFileXlsx = false;

            _snackbar.Add("XLSX file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting Excel: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportSql()
    {
        try
        {
            isLoadingFileSql = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportSqlAsync(aerospaceData, "Aerospace");

            isLoadingFileSql = false;

            _snackbar.Add("SQL script exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting SQL: {ex.Message}", Severity.Error);
        }
    }
}
