@inject IContabilityFaker _contabilityFaker
@inject ISnackbar _snackbar
@inject ILocalStorageService _localStorage
@inject IFileExporterService _fileExporterService

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDataGrid T="ContabilityModel" Items="contabilityData" Dense="true" Hover="true" Bordered="true" Striped="true" ColumnResizeMode="ResizeMode.Container">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Contability Data</MudText>
            <MudSpacer />
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                @if (isLoadingFileCsv)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" OnClick="ExportCsv">Export .csv</MudButton>
                }

                @if (isLoadingFileXlsx)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportXlsx">Export .xlsx</MudButton>
                }

                @if (isLoadingFileSql)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileCode" OnClick="ExportSql">Export .sql</MudButton>
                }
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.AccountName" Title="Account Name" />
            <PropertyColumn Property="x => x.AccountNumber" Title="Account Number" />
            <PropertyColumn Property="x => x.Balance" Title="Balance">
                <CellTemplate>
                    @($"{regionInfo.CurrencySymbol} {context.Item.Balance:N2}")
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.LastTransactionDate" Title="Last Transaction">
                <CellTemplate>
                    @context.Item.LastTransactionDate.ToShortDateString()
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Currency" Title="Currency" />
            <PropertyColumn Property="x => x.TransactionType" Title="Transaction Type" />
            <PropertyColumn Property="x => x.Department" Title="Department" />
            <PropertyColumn Property="x => x.ResponsiblePerson" Title="Responsible" />
            <PropertyColumn Property="x => x.Description" Title="Description" />
            <PropertyColumn Property="x => x.Status" Title="Status" />
            <PropertyColumn Property="x => x.CostCenter" Title="Cost Center" />
            <PropertyColumn Property="x => x.CreatedAt" Title="Created At">
                <CellTemplate>
                    @context.Item.CreatedAt.ToShortDateString()
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.AnnualBudget" Title="Annual Budget">
                <CellTemplate>
                    @($"{regionInfo.CurrencySymbol} {context.Item.AnnualBudget:N2}")
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.FiscalYear" Title="Fiscal Year" />
            <PropertyColumn Property="x => x.IsActive" Title="Active">
                <CellTemplate>
                    @(context.Item.IsActive ? "Yes" : "No")
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ContabilityModel" />
        </PagerContent>
    </MudDataGrid>
}


@code {

    private bool isLoadingFileCsv = false;

    private bool isLoadingFileXlsx = false;

    private bool isLoadingFileSql = false;

    private bool isLoading = false;

    private IEnumerable<ContabilityModel> contabilityData = [];

    RegionInfo? regionInfo = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            int Quantity = await _localStorage.GetItemAsync<int>("quantity");

            string? Language = await _localStorage.GetItemAsync<string>("selectedLanguage");

            await Task.Delay(1000);

            contabilityData = await _contabilityFaker.GenerateContabilityAsync(Quantity, Language!);

            Language = Language!.ReplaceLanguage(Language!);

            regionInfo = new RegionInfo(Language);

            isLoading = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            contabilityData = Enumerable.Empty<ContabilityModel>();
        }
        await Task.CompletedTask;
    }

    private async Task ExportCsv()
    {
        try
        {
            isLoadingFileCsv = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportCsvAsync(contabilityData, "Contability");

            isLoadingFileCsv = false;

            _snackbar.Add("CSV file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportXlsx()
    {
        try
        {
            isLoadingFileXlsx = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportXlsxAsync(contabilityData, "Contability");

            isLoadingFileXlsx = false;

            _snackbar.Add("XLSX file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting Excel: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportSql()
    {
        try
        {
            isLoadingFileSql = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportSqlAsync(contabilityData, "Contability");

            isLoadingFileSql = false;

            _snackbar.Add("SQL script exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting SQL: {ex.Message}", Severity.Error);
        }
    }

}

