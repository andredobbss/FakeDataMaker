@inject ILogisticsFaker _logisticsFaker
@inject ISnackbar _snackbar
@inject ILocalStorageService _localStorage
@inject IFileExporterService _fileExporterService

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudDataGrid T="LogisticsModel" Items="logisticsData" Dense="true" Hover="true" Bordered="true" Striped="true" ColumnResizeMode="ResizeMode.Container">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Logistics Data</MudText>
            <MudSpacer />
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" OnClick="ExportCsv">Export .csv</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportXlsx">Export .xlsx</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileCode" OnClick="ExportSql">Export .sql</MudButton>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.ShipmentId" Title="Shipment ID" />
            <PropertyColumn Property="x => x.CarrierName" Title="Carrier" />
            <PropertyColumn Property="x => x.Origin" Title="Origin" />
            <PropertyColumn Property="x => x.Destination" Title="Destination" />

            <PropertyColumn Property="x => x.DepartureDate" Title="Departure">
                <CellTemplate>@(context.Item.DepartureDate.ToShortDateString())</CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.EstimatedArrival" Title="Estimated Arrival">
                <CellTemplate>@(context.Item.EstimatedArrival.ToShortDateString())</CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.TransportMode" Title="Transport" />
            <PropertyColumn Property="x => x.DriverName" Title="Driver" />
            <PropertyColumn Property="x => x.VehiclePlate" Title="Plate" />

            <PropertyColumn Property="x => x.DistanceKm" Title="Distance (km)">
                <CellTemplate>@($"{context.Item.DistanceKm:N1} km")</CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.FreightCost" Title="Freight Cost">
                <CellTemplate>@($"{regionInfo.CurrencySymbol}{context.Item.FreightCost:N2}")</CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="x => x.CargoDescription" Title="Cargo" />
            <PropertyColumn Property="x => x.CargoWeightKg" Title="Weight (kg)" />
            <PropertyColumn Property="x => x.Status" Title="Status" />
            <PropertyColumn Property="x => x.TrackingCode" Title="Tracking" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="LogisticsModel" />
        </PagerContent>
    </MudDataGrid>
}


@code {

    private bool isLoading = false;

    private IEnumerable<LogisticsModel> logisticsData = [];

    RegionInfo? regionInfo = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            int Quantity = await _localStorage.GetItemAsync<int>("quantity");

            string? Language = await _localStorage.GetItemAsync<string>("selectedLanguage");

            await Task.Delay(1000);

            logisticsData = await _logisticsFaker.GenerateLogisticsAsync(Quantity, Language!);

            Language = Language!.ReplaceLanguage(Language!);

            regionInfo = new RegionInfo(Language);

            isLoading = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            logisticsData = Enumerable.Empty<LogisticsModel>();
        }
        await Task.CompletedTask;

    }

    private async Task ExportCsv()
    {
        try
        {
            await _fileExporterService.ExportCsvAsync(logisticsData, "Logistics");

            _snackbar.Add("CSV file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportXlsx()
    {
        try
        {
            await _fileExporterService.ExportXlsxAsync(logisticsData, "Logistics");

            _snackbar.Add("XLSX file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting Excel: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportSql()
    {
        try
        {
            await _fileExporterService.ExportSqlAsync(logisticsData, "Logistics");

            _snackbar.Add("SQL script exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting SQL: {ex.Message}", Severity.Error);
        }
    }

}
