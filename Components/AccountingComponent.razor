@inject IAccountingFaker _accountingFaker
@inject ISnackbar _snackbar
@inject ILocalStorageService _localStorage
@inject IFileExporterService _fileExporterService

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDataGrid T="AccountingModel" Items="accountingData" Dense="true" Hover="true" Bordered="true" Striped="true" ColumnResizeMode="ResizeMode.Container">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Accounting Data</MudText>
            <MudSpacer />
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">

                @if (isLoadingFileCsv)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" OnClick="ExportCsv">Export .csv</MudButton>
                }

                @if (isLoadingFileXlsx)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportXlsx">Export .xlsx</MudButton>
                }

                @if (isLoadingFileSql)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileCode" OnClick="ExportSql">Export .sql</MudButton>
                }            

            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="c => c.ClientName" Title="Client Name" />
            <PropertyColumn Property="c => c.AccountNumber" Title="Account Number" />
            <PropertyColumn Property="c => c.AccountType" Title="Account Type" />

            <PropertyColumn Property="c => c.AccountBalance" Title="Balance">
                <CellTemplate>
                    @($"{regionInfo.CurrencySymbol} {context.Item.AccountBalance:N2}")
                </CellTemplate>
            </PropertyColumn>


            <PropertyColumn Property="c => c.OpeningDate" Title="Opening Date">
                <CellTemplate>
                    @(context.Item.OpeningDate.ToShortDateString())
                </CellTemplate>
            </PropertyColumn>


            <PropertyColumn Property="c => c.LastTransactionDate" Title="Last Transaction">
                <CellTemplate>
                    @(context.Item.LastTransactionDate.ToShortDateString())
                </CellTemplate>
            </PropertyColumn>


            <PropertyColumn Property="c => c.Currency" Title="Currency" />
            <PropertyColumn Property="c => c.TaxId" Title="Tax ID" />
            <PropertyColumn Property="c => c.Country" Title="Country" />

            <PropertyColumn Property="c => c.AccountantName" Title="Accountant" />


            <PropertyColumn Property="c => c.AnnualRevenue" Title="Annual Revenue">
                <CellTemplate>
                    @($"{regionInfo.CurrencySymbol} {context.Item.AnnualRevenue:N2}")
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn Property="c => c.MonthlyExpenses" Title="Monthly Expenses">
                <CellTemplate>
                    @($"{regionInfo.CurrencySymbol} {context.Item.MonthlyExpenses:N2}")
                </CellTemplate>
            </PropertyColumn>


            <PropertyColumn Property="c => c.LedgerType" Title="Ledger Type" />
            <PropertyColumn Property="c => c.Status" Title="Status" />
            <PropertyColumn Property="c => c.Notes" Title="Notes" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="AccountingModel" />
        </PagerContent>
    </MudDataGrid>

}


@code {

    private bool isLoadingFileCsv = false;

    private bool isLoadingFileXlsx = false;

    private bool isLoadingFileSql = false;

    private bool isLoading = false;

    private IEnumerable<AccountingModel> accountingData = [];

    RegionInfo? regionInfo = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            int Quantity = await _localStorage.GetItemAsync<int>("quantity");

            string? Language = await _localStorage.GetItemAsync<string>("selectedLanguage");

            await Task.Delay(1000);

            accountingData = await _accountingFaker.GenerateAccountingAsync(Quantity, Language!);

            Language = Language!.ReplaceLanguage(Language!);

            regionInfo = new RegionInfo(Language);

            isLoading = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            accountingData = Enumerable.Empty<AccountingModel>();
        }
        await Task.CompletedTask;

    }

    private async Task ExportCsv()
    {
        try
        {
            isLoadingFileCsv = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportCsvAsync(accountingData, "Accounting");

            isLoadingFileCsv = false;

            _snackbar.Add("CSV file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportXlsx()
    {
        try
        {
            isLoadingFileXlsx = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportXlsxAsync(accountingData, "Accounting");

            isLoadingFileXlsx = false;

            _snackbar.Add("XLSX file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting Excel: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportSql()
    {
        try
        {
            isLoadingFileSql = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportSqlAsync(accountingData, "Accounting");

            isLoadingFileSql = false;

            _snackbar.Add("SQL script exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting SQL: {ex.Message}", Severity.Error);
        }
    }

}
