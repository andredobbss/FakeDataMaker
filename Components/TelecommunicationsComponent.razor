@inject ITelecommunicationsFaker _telecommunicationsFaker
@inject ISnackbar _snackbar
@inject ILocalStorageService _localStorage
@inject IFileExporterService _fileExporterService

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudDataGrid T="TelecommunicationsModel" Items="telecomData" Dense="true" Hover="true" Bordered="true" Striped="true" ColumnResizeMode="ResizeMode.Container">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Telecommunications Data</MudText>
            <MudSpacer />
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                @if (isLoadingFileCsv)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" OnClick="ExportCsv">Export .csv</MudButton>
                }

                @if (isLoadingFileXlsx)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportXlsx">Export .xlsx</MudButton>
                }

                @if (isLoadingFileSql)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileCode" OnClick="ExportSql">Export .sql</MudButton>
                }
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.CompanyId" Title="Company ID" />
            <PropertyColumn Property="x => x.CompanyName" Title="Name" />
            <PropertyColumn Property="x => x.Headquarters" Title="Headquarters" />
            <PropertyColumn Property="x => x.Country" Title="Country" />
            <PropertyColumn Property="x => x.ServiceType" Title="Service" />
            <PropertyColumn Property="x => x.CEO" Title="CEO" />
            <PropertyColumn Property="x => x.ContactEmail" Title="Email" />
            <PropertyColumn Property="x => x.PhoneSupport" Title="Phone" />
            <PropertyColumn Property="x => x.Website" Title="Website" />
            <PropertyColumn Property="x => x.FoundedDate" Title="Founded">
                <CellTemplate>@context.Item.FoundedDate.ToShortDateString()</CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.NumberOfSubscribers" Title="Subscribers" />
            <PropertyColumn Property="x => x.AnnualRevenueUSD" Title="Revenue (USD)">
                <CellTemplate>@($"{regionInfo.CurrencySymbol} {context.Item.AnnualRevenueUSD:N2}")</CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Offers5G" Title="5G Available">
                <CellTemplate>@(context.Item.Offers5G ? "Yes" : "No")</CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Status" Title="Status" />
            <PropertyColumn Property="x => x.NetworkCoverage" Title="Coverage" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="TelecommunicationsModel" />
        </PagerContent>
    </MudDataGrid>
}


@code {

    private bool isLoadingFileCsv = false;

    private bool isLoadingFileXlsx = false;

    private bool isLoadingFileSql = false;

    private bool isLoading = false;

    private IEnumerable<TelecommunicationsModel> telecomData = [];

    RegionInfo? regionInfo = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            int Quantity = await _localStorage.GetItemAsync<int>("quantity");

            string? Language = await _localStorage.GetItemAsync<string>("selectedLanguage");

            await Task.Delay(1000);

            telecomData = await _telecommunicationsFaker.GenerateTelecommunicationsAsync(Quantity, Language!);

            Language = Language!.ReplaceLanguage(Language!);

            regionInfo = new RegionInfo(Language);

            isLoading = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            telecomData = Enumerable.Empty<TelecommunicationsModel>();
        }
        await Task.CompletedTask;

    }

    private async Task ExportCsv()
    {
        try
        {
            isLoadingFileCsv = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportCsvAsync(telecomData, "Telecommunications");

            isLoadingFileCsv = false;

            _snackbar.Add("CSV file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportXlsx()
    {
        try
        {
            isLoadingFileXlsx = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportXlsxAsync(telecomData, "Telecommunications");

            isLoadingFileXlsx = false;

            _snackbar.Add("XLSX file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting Excel: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportSql()
    {
        try
        {
            isLoadingFileSql = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportSqlAsync(telecomData, "Telecommunications");

            isLoadingFileSql = false;

            _snackbar.Add("SQL script exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting SQL: {ex.Message}", Severity.Error);
        }
    }


}
