@inject IEnvironmentalServiceFaker _environmentalServiceFaker
@inject ISnackbar _snackbar
@inject ILocalStorageService _localStorage
@inject IFileExporterService _fileExporterService

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
}
else
{
    <MudDataGrid T="EnvironmentalServiceModel" Items="environmentalData" Dense="true" Hover="true" Bordered="true" Striped="true" ColumnResizeMode="ResizeMode.Container">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Environmental Services Data</MudText>
            <MudSpacer />
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" OnClick="ExportCsv">Export .csv</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportXlsx">Export .xlsx</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileCode" OnClick="ExportSql">Export .sql</MudButton>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.ProjectId" Title="Project ID" />
            <PropertyColumn Property="x => x.ProjectName" Title="Project Name" />
            <PropertyColumn Property="x => x.ClientName" Title="Client" />
            <PropertyColumn Property="x => x.Region" Title="Region" />
            <PropertyColumn Property="x => x.ServiceType" Title="Service Type" />
            <PropertyColumn Property="x => x.ResponsibleEngineer" Title="Engineer" />
            <PropertyColumn Property="x => x.StartDate" Title="Start Date">
                <CellTemplate>@context.Item.StartDate.ToShortDateString()</CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.CompletionDate" Title="Completion Date">
                <CellTemplate>@context.Item.CompletionDate.ToShortDateString()</CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Budget" Title="Budget">
                <CellTemplate>
                    @($"{regionInfo.CurrencySymbol} {context.Item.Budget:N2}")
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.Status" Title="Status" />
            <PropertyColumn Property="x => x.ReportFile" Title="Report" />
            <PropertyColumn Property="x => x.RequiresInspection" Title="Inspection?">
                <CellTemplate>@(context.Item.RequiresInspection ? "Yes" : "No")</CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.NumberOfTechnicians" Title="Technicians" />
            <PropertyColumn Property="x => x.EnvironmentalImpactLevel" Title="Impact Level" />
            <PropertyColumn Property="x => x.Notes" Title="Notes" />
        </Columns>

        <PagerContent>
            <MudDataGridPager T="EnvironmentalServiceModel" />
        </PagerContent>
    </MudDataGrid>
}


@code {

    private bool isLoading = false;

    private IEnumerable<EnvironmentalServiceModel> environmentalData = [];

    RegionInfo? regionInfo = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            int Quantity = await _localStorage.GetItemAsync<int>("quantity");

            string? Language = await _localStorage.GetItemAsync<string>("selectedLanguage");

            await Task.Delay(1000);

            environmentalData = await _environmentalServiceFaker.GenerateEnvironmentalServicesAsync(Quantity, Language!);

            Language = Language!.ReplaceLanguage(Language!);

            regionInfo = new RegionInfo(Language);

            isLoading = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            environmentalData = Enumerable.Empty<EnvironmentalServiceModel>();
        }
        await Task.CompletedTask;

    }

    private async Task ExportCsv()
    {
        try
        {
            await _fileExporterService.ExportCsvAsync(environmentalData, "EnvironmentalService");

            _snackbar.Add("CSV file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportXlsx()
    {
        try
        {
            await _fileExporterService.ExportXlsxAsync(environmentalData, "EnvironmentalService");

            _snackbar.Add("XLSX file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting Excel: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportSql()
    {
        try
        {
            await _fileExporterService.ExportSqlAsync(environmentalData, "EnvironmentalService");

            _snackbar.Add("SQL script exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting SQL: {ex.Message}", Severity.Error);
        }
    }

}
