@inject IInsuranceFaker _insuranceFaker
@inject ISnackbar _snackbar
@inject ILocalStorageService _localStorage
@inject IFileExporterService _fileExporterService

<MudDataGrid T="InsuranceModel" Items="insuranceData" Dense="true" Hover="true" Bordered="true" Striped="true" ColumnResizeMode="ResizeMode.Container">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Insurance Data</MudText>
        <MudSpacer />
        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
            @if (isLoadingFileCsv)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileDocument" OnClick="ExportCsv">Export .csv</MudButton>
            }

            @if (isLoadingFileXlsx)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileExcel" OnClick="ExportXlsx">Export .xlsx</MudButton>
            }

            @if (isLoadingFileSql)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" />
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Custom.FileFormats.FileCode" OnClick="ExportSql">Export .sql</MudButton>
            }
        </MudStack>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="c => c.Id" Title="Id"/>
        <PropertyColumn Property="c => c.PolicyNumber" Title="Policy Number"/>
        <PropertyColumn Property="c => c.HolderName" Title="Holder Name"/>
        <PropertyColumn Property="c => c.InsuranceType" Title="Insurance Type"/>
        <PropertyColumn Property="c => c.PremiumAmount" Title="Premium Amount">
            <CellTemplate>
                @($"{regionInfo.CurrencySymbol} {context.Item.PremiumAmount:N2}")
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="c => c.CoverageLimit" Title="Coverage Limit">
            <CellTemplate>
                @($"{regionInfo.CurrencySymbol} {context.Item.CoverageLimit:N2}")
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="c => c.ProviderName" Title="Provider Name"/>
        <PropertyColumn Property="c => c.StartDate" Title="Start Date">
            <CellTemplate>
                @(context.Item.StartDate.ToShortDateString())
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="c => c.EndDate" Title="End Date">
                <CellTemplate>
                @(context.Item.EndDate.ToShortDateString())
                </CellTemplate>
            </PropertyColumn>
        <PropertyColumn Property="c => c.Status" Title="Status"/>
        <PropertyColumn Property="c => c.ContactEmail" Title="Contact Email"/>
        <PropertyColumn Property="c => c.PhoneNumber" Title="Phone Number"/>
        <PropertyColumn Property="c => c.Address" Title="Address"/>
        <PropertyColumn Property="c => c.IsAutoRenewal" Title="Is Auto Renewal"/>
        <PropertyColumn Property="c => c.AgentName" Title="Agent Name"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="InsuranceModel" />
    </PagerContent>
</MudDataGrid>


@code {

    private bool isLoadingFileCsv = false;

    private bool isLoadingFileXlsx = false;

    private bool isLoadingFileSql = false;

    private bool isLoading = false;

    private IEnumerable<InsuranceModel> insuranceData = [];

    RegionInfo? regionInfo = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            int Quantity = await _localStorage.GetItemAsync<int>("quantity");

            string? Language = await _localStorage.GetItemAsync<string>("selectedLanguage");

            await Task.Delay(1000);

            insuranceData = await _insuranceFaker.GenerateInsuranceAsync(Quantity, Language!);

            Language = Language!.ReplaceLanguage(Language!);

            regionInfo = new RegionInfo(Language);

            isLoading = false;
        }
        catch (Exception ex)
        {
            _snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            insuranceData = Enumerable.Empty<InsuranceModel>();
        }
        await Task.CompletedTask;

    }

    private async Task ExportCsv()
    {
        try
        {
            isLoadingFileCsv = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportCsvAsync(insuranceData, "Insurance");

            isLoadingFileCsv = false;

            _snackbar.Add("CSV file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting CSV: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportXlsx()
    {
        try
        {
            isLoadingFileXlsx = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportXlsxAsync(insuranceData, "Insurance");

            isLoadingFileXlsx = false;

            _snackbar.Add("XLSX file exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting Excel: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportSql()
    {
        try
        {
            isLoadingFileSql = true;

            await Task.Delay(1000);

            await _fileExporterService.ExportSqlAsync(insuranceData, "Insurance");

            isLoadingFileSql = false;

            _snackbar.Add("SQL script exported successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _snackbar.Add($"Error exporting SQL: {ex.Message}", Severity.Error);
        }
    }

}
